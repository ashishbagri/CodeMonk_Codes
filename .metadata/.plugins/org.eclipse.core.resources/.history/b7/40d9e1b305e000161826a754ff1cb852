package practice_problems;

import java.util.Scanner;

public class CityandCampers {
	
	private int[] nodes;
	private int[] size;
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		new CityandCampers().start(sc);
	}

	private void start(Scanner sc) {
		int n = Integer.parseInt(sc.next());
		nodes = new int[n+1];
		size = new int[n+1];
		int q = Integer.parseInt(sc.next());
		while(q-->0){
			union(Integer.parseInt(sc.next()),Integer.parseInt(sc.next()));
		}
	}
	public void union(int p, int q) {
		int rootP = root(p);
		int rootQ = root(q);
		if (size[rootP] > size[rootQ]) {
			nodes[rootQ] = rootP;
			size[rootP] += size[rootQ];
		} else {
			nodes[rootP] = rootQ;
			size[rootQ] += size[rootP];
		}
	}

	protected int root(int p) {
		while (nodes[p] != p)
			p = nodes[p];
		return p;
	}

	/**
	 * Finds if two points are connected by logN complexity
	 */
	public boolean connected(int p, int q) {
		// TODO Auto-generated method stub
		return root(p) == root(q);
	}
}
