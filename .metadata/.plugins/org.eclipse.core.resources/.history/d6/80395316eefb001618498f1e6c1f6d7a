package basics_of_string_manipulation;

import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;

public class FavoriteSubsequence {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		String input = sc.next();
		Map<Character,Integer> countMap = new HashMap<Character, Integer>();
		countMap.put('a', 0);
		countMap.put('b', 0);
		countMap.put('c', 0);
		
		for(int i =0;i<input.length();i++){
			int n = countMap.get(input.charAt(i));
			countMap.put(input.charAt(i), n++);
		}
		
		int count = 0;
		
		String commonString = "abc";
		/*for(int i =0;i<commonString.length();i++){
			int n = countMap.get(commonString.charAt(i));
			if()
		}*/
		
		while(input.contains("a")){
			input = input.substring(input.indexOf('a'));
			while(input.contains("b")){
				input =input.substring(input.indexOf('b'));
				while(input.contains("c")){
					input = input.substring(input.indexOf('c'));
					count++;
				}
			}
		}
		System.out.println(count);
	}
	
	boolean isSubSequence(char str1[], char str2[], int m, int n)
	{
	    // Base Cases
	    if (m == 0) return true;
	    if (n == 0) return false;
	 
	    // If last characters of two strings are matching
	    if (str1[m-1] == str2[n-1])
	        return isSubSequence(str1, str2, m-1, n-1);
	 
	    // If last characters are not matching
	    return isSubSequence(str1, str2, m, n-1);
	}
}
