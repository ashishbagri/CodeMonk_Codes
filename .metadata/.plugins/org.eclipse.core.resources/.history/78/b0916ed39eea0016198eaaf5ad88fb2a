package BasicsOfInputPutput;

import java.util.Scanner;

/**
 * Dhananjay has recently learned about ASCII values.He is very fond of
 * experimenting. With his knowledge of ASCII values and character he has
 * developed a special word and named it Dhananjay's Magical word.
 * 
 * A word which consist of alphabets whose ASCII values is a prime number is an
 * Dhananjay's Magical word. An alphabet is Dhananjay's Magical alphabet if its
 * ASCII value is prime.
 * 
 * Dhananjay's nature is to boast about the things he know or have learnt about.
 * So just to defame his friends he gives few string to his friends and ask them
 * to convert it to Dhananjay's Magical word. None of his friends would like to
 * get insulted. Help them to convert the given strings to Dhananjay's Magical
 * Word.
 * 
 * Rules for converting:
 * 
 * 1.Each character should be replaced by the nearest Dhananjay's Magical
 * alphabet.
 * 
 * 2.If the character is equidistant with 2 Magical alphabets. The one with
 * lower ASCII value will be considered as its replacement.
 * 
 * Input format:
 * 
 * First line of input contains an integer T number of test cases. Each test
 * case contains an integer N (denoting the length of the string) and a string
 * S.
 * 
 * Output Format:
 * 
 * For each test case, print Dhananjay's Magical Word in a new line.
 * 
 * Constraints:
 * 
 * 1 <= T <= 100
 * 
 * 1 <= |S| <= 500
 * 
 * SAMPLE INPUT 1 6 AFREEN SAMPLE OUTPUT CGSCCO Explanation ASCII values of
 * alphabets in AFREEN are 65, 70, 82, 69 ,69 and 78 respectively which are
 * converted to CGSCCO with ASCII values 67, 71, 83, 67, 67, 79 respectively.
 * All such ASCII values are prime numbers.
 * 
 * Time Limit: 0.5 sec(s) for each input file. Memory Limit: 256 MB Source
 * Limit: 1024 KB
 * 
 * @author PaRV
 *
 */
public class MagicalWord {
	
	private static int[] ascii = new int[26];
	private static int[] nearestPrime = new int[26];
	private static boolean[] isPrimeFalg = new boolean[123];
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int tests = sc.nextInt();
		while(tests-->0){
			int len = Integer.parseInt(sc.next());
			intializeData();
			String str = sc.next();
			char[] c = str.toCharArray();
			for(int i=0;i<str.length();i++){
				c[i] = (char) nearestPrime[c[i]-'A'];
			}
			System.out.println(c);
		}
	}

	private static void intializeData() {
		for(int i=0;i<26;i++){
			ascii[i] = 'A'+i;
		}
		for(int i=0;i<123;i++){
			isPrimeFalg[i] = true;
		}
		for(int i = 2;i<isPrimeFalg.length;i++){
			if(isPrimeFalg[i]){
				for(int j=i*2;j<isPrimeFalg.length;j+=i){
					isPrimeFalg[j] = false;
				}
			}
		}
		for(int i=0;i<26;i++){
			if(isPrimeFalg[ascii[i]])
				nearestPrime[i] = ascii[i];
			else
				nearestPrime[i] = findNearestPrime(i);
		}
	}

	private static int findNearestPrime(int i) {
		int value = ascii[i];
		if(i==0){
			while(!isPrimeFalg[ascii[i]])
				i++;
		}else
			if(i==25){
				while(!isPrimeFalg[ascii[i]])
					i--;
			}
			else
				{
				int k = i;
				while(k<26 && !isPrimeFalg[ascii[k]])
					k++;
				int j = i;
				while(j>=0 && !isPrimeFalg[ascii[j]] )
					j--;
				if((k-i)>(i-j))
					return ascii[j];
				return ascii[k];
			}
		return ascii[i];
	}

	
}
