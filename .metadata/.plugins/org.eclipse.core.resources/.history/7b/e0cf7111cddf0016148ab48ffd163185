package core_concepts;


public abstract class UnionFind implements DisjointDS{

	private int[] nodes;

	/**
	 * Initiate Union Find object by the number of objects required.
	 * 
	 * @param n
	 */
	public UnionFind(int n) {
		nodes = new int[n];
		for (int i = 0; i < n; i++) {
			nodes[i] = i;
		}
	}

	/**
	 * Connects two elements by scanning whole nodes tree and see if any node
	 * has value equal to first node then change it to second element.
	 *
	 * For each union we would need to scan the whole nodes tree and hence it
	 * will take N. Q(n)
	 * 
	 * @param p
	 * @param q
	 */
	public void union(int p, int q) {

		int pId = nodes[p];
		int qId = nodes[q];

		for (int i = 0; i < nodes.length; i++) {
			if (nodes[i] == pId) {
				nodes[i] = qId;
			}
		}
	}

	/**
	 * Check of both index has the same id; if yes then both are connected.
	 * 
	 * Takes constant time to see if two nodes are connected. Q(1)
	 * 
	 * @param p
	 * @param q
	 * @return
	 */
	public boolean connected(int p, int q) {
		return nodes[p] == nodes[q];
	}

}
